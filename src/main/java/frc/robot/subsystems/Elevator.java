// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import static edu.wpi.first.units.Units.RotationsPerSecond;
import static edu.wpi.first.units.Units.RotationsPerSecondPerSecond;
import static edu.wpi.first.units.Units.Second;

import com.ctre.phoenix6.StatusCode;
import com.ctre.phoenix6.configs.FeedbackConfigs;
import com.ctre.phoenix6.configs.MotionMagicConfigs;
import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.controls.MotionMagicVoltage;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix6.hardware.TalonFX;

import edu.wpi.first.wpilibj.DigitalInput;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Elevator extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private TalonFX motorElevatorLower;
private TalonFX motorElevatorUpper;
private DigitalInput elevatorBottomSwich;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private final MotionMagicVoltage m_motionMagicReqU = new MotionMagicVoltage(0);
private final MotionMagicVoltage m_motionMagicReqL = new MotionMagicVoltage(0);

private int m_printCount = 0;
    /**
    *
    */
    public Elevator() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
motorElevatorLower = new TalonFX(14, "rio");
 
 

motorElevatorUpper = new TalonFX(15, "rio");
 
 

elevatorBottomSwich = new DigitalInput(1);
 addChild("elevatorBottomSwich", elevatorBottomSwich);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        TalonFXConfiguration elevatorUpperConfig = new TalonFXConfiguration();
        TalonFXConfiguration elevatorLowerConfig = new TalonFXConfiguration();

        /* Configure Gear Ratio */
        FeedbackConfigs elevatorUpperFeedback = elevatorUpperConfig.Feedback;
        FeedbackConfigs elevatorLowerFeedback = elevatorLowerConfig.Feedback;
        elevatorUpperFeedback.SensorToMechanismRatio = 12.8;
        elevatorLowerFeedback.SensorToMechanismRatio = 12.8;
    
        /* Configure Motion Magic */
        MotionMagicConfigs motionMagicU = elevatorUpperConfig.MotionMagic;
        motionMagicU.withMotionMagicCruiseVelocity(RotationsPerSecond.of(5)) //(meachanism) rotations per second cruise
            .withMotionMagicAcceleration(RotationsPerSecondPerSecond.of(10))
            .withMotionMagicJerk(RotationsPerSecondPerSecond.per(Second).of(100));

        MotionMagicConfigs motionMagicL = elevatorLowerConfig.MotionMagic;
        motionMagicL.withMotionMagicCruiseVelocity(RotationsPerSecond.of(5)) //(meachanism) rotations per second cruise
            .withMotionMagicAcceleration(RotationsPerSecondPerSecond.of(10))
            .withMotionMagicJerk(RotationsPerSecondPerSecond.per(Second).of(100));
        
        Slot0Configs upperSlot0 = elevatorUpperConfig.Slot0;
        upperSlot0.kV = 0.12; // A velocity target of 1 rps results in 0.12 V output
        upperSlot0.kS = 0.25; // Add 0.25 V output to overcome static friction
        upperSlot0.kA = 0.01; // An acceleration of 1 rps/s requires 0.01 V output
        upperSlot0.kP = 60; // A position error of 0.2 rotations results in 12 V output
        upperSlot0.kI = 0; // No output for integrated error
        upperSlot0.kD = 0.5; // A velocity error of 1 rps results in 0.5 V output

        Slot0Configs lowerSlot0 = elevatorLowerConfig.Slot0;
        lowerSlot0.kD = 0.5; // A velocity error of 1 rps results in 0.5 V output
        lowerSlot0.kV = 0.12; // A velocity target of 1 rps results in 0.12 V output
        lowerSlot0.kS = 0.25; // Add 0.25 V output to overcome static friction
        lowerSlot0.kA = 0.01; // An acceleration of 1 rps/s requires 0.01 V output
        lowerSlot0.kP = 60; // A position error of 0.2 rotations results in 12 V output
        lowerSlot0.kI = 0; // No output for integrated error


        StatusCode statusU = StatusCode.StatusCodeNotInitialized;
        for (int i = 0; i < 5; ++i) {
            statusU = motorElevatorUpper.getConfigurator().apply(elevatorUpperConfig);
            if (statusU.isOK()) break;
        }
        if (!statusU.isOK()) {
            System.out.println("Could not configure device. Error: " + statusU.toString());
        }

        StatusCode statusL = StatusCode.StatusCodeNotInitialized;
        for (int i = 0; i < 5; ++i) {
            statusL = motorElevatorLower.getConfigurator().apply(elevatorLowerConfig);
            if (statusL.isOK()) break;
        }
        if (!statusL.isOK()) {
            System.out.println("Could not configure device. Error: " + statusL.toString());
        }
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        if (++m_printCount >= 10) {
            m_printCount = 0;
            System.out.println("PosU: " + motorElevatorUpper.getPosition());
            System.out.println("VelU: " + motorElevatorUpper.getVelocity());
            System.out.println();
          }

        if (++m_printCount >= 10) {
            m_printCount = 0;
            System.out.println("PosL: " + motorElevatorLower.getPosition());
            System.out.println("VelL: " + motorElevatorLower.getVelocity());
            System.out.println();
        }

        // if (elevatorBottomSwich.get()) {
        //     motorElevatorUpper.setPosition(0);
        //     motorElevatorLower.setPosition(0);
        // }
        // commented out because it causes extreme jerk when it stops
        SmartDashboard.putBoolean("bottomSwitch", getBottomSwitch());


    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void runToPosition(double inchesFromBottom) {

        /* split the translation between two motors */
            /* two ways to accomplish
        *        1. only move upper if lower is at max
            *    2. split the motion evenly between the two
            */
        double upperMotorTransform = inchesFromBottom * Constants.UpperMotor.percentOfTranslation;
        double lowerMotorTransform = inchesFromBottom * Constants.LowerMotor.percentOfTranslation;

        /* inches to rotatios transform */
        double rotationsU = upperMotorTransform * Constants.UpperMotor.translationToRotation;
        double rotationsL = lowerMotorTransform * Constants.LowerMotor.translationToRotation;


        motorElevatorUpper.setControl(m_motionMagicReqU.withPosition(rotationsU).withSlot(0));
        motorElevatorLower.setControl(m_motionMagicReqL.withPosition(rotationsL).withSlot(0));
    }

    public void returnToBottom() {
        motorElevatorUpper.setControl(m_motionMagicReqU.withPosition(0).withSlot(0));
        motorElevatorLower.setControl(m_motionMagicReqL.withPosition(0).withSlot(0));
    }

    public boolean getBottomSwitch() {
        return elevatorBottomSwich.get();
    }
}

